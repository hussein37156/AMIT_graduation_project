
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000072a  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080006a  0080006a  000007c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d9  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfa  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f05  00000000  00000000  00002ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00003dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c7  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c96  00000000  00000000  000049b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  8a:	0c 94 93 03 	jmp	0x726	; 0x726 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <H_DC_motor_forward>:
void H_DC_motor_init(DC_motor_object DC_motor){
	M_DIO_set_pin_direction(DC_motor.port,DC_motor.pin_1,output);
	M_DIO_set_pin_direction(DC_motor.port,DC_motor.pin_2,output);	
}

void H_DC_motor_forward(DC_motor_object	DC_motor){
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	00 d0       	rcall	.+0      	; 0x9a <H_DC_motor_forward+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <H_DC_motor_forward+0xa>
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	5a 83       	std	Y+2, r21	; 0x02
  a4:	6b 83       	std	Y+3, r22	; 0x03
  a6:	7c 83       	std	Y+4, r23	; 0x04
  a8:	8d 83       	std	Y+5, r24	; 0x05
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_1,high);
  aa:	14 2f       	mov	r17, r20
  ac:	6a 81       	ldd	r22, Y+2	; 0x02
  ae:	7b 81       	ldd	r23, Y+3	; 0x03
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	81 2f       	mov	r24, r17
  b4:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_2,low);
  b8:	6c 81       	ldd	r22, Y+4	; 0x04
  ba:	7d 81       	ldd	r23, Y+5	; 0x05
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	81 2f       	mov	r24, r17
  c0:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
}
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	08 95       	ret

000000d6 <H_DC_motor_backward>:

void H_DC_motor_backward(DC_motor_object DC_motor){
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <H_DC_motor_backward+0x8>
  de:	00 d0       	rcall	.+0      	; 0xe0 <H_DC_motor_backward+0xa>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	5a 83       	std	Y+2, r21	; 0x02
  e8:	6b 83       	std	Y+3, r22	; 0x03
  ea:	7c 83       	std	Y+4, r23	; 0x04
  ec:	8d 83       	std	Y+5, r24	; 0x05
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_1,low);
  ee:	14 2f       	mov	r17, r20
  f0:	6a 81       	ldd	r22, Y+2	; 0x02
  f2:	7b 81       	ldd	r23, Y+3	; 0x03
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	81 2f       	mov	r24, r17
  f8:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_2,high);
  fc:	6c 81       	ldd	r22, Y+4	; 0x04
  fe:	7d 81       	ldd	r23, Y+5	; 0x05
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	81 2f       	mov	r24, r17
 104:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	08 95       	ret

0000011a <H_DC_motor_stop>:

void H_DC_motor_stop(DC_motor_object DC_motor){
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <H_DC_motor_stop+0x8>
 122:	00 d0       	rcall	.+0      	; 0x124 <H_DC_motor_stop+0xa>
 124:	1f 92       	push	r1
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	5a 83       	std	Y+2, r21	; 0x02
 12c:	6b 83       	std	Y+3, r22	; 0x03
 12e:	7c 83       	std	Y+4, r23	; 0x04
 130:	8d 83       	std	Y+5, r24	; 0x05
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_1,low);
 132:	14 2f       	mov	r17, r20
 134:	6a 81       	ldd	r22, Y+2	; 0x02
 136:	7b 81       	ldd	r23, Y+3	; 0x03
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	81 2f       	mov	r24, r17
 13c:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_2,low);
 140:	6c 81       	ldd	r22, Y+4	; 0x04
 142:	7d 81       	ldd	r23, Y+5	; 0x05
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	81 2f       	mov	r24, r17
 148:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
}
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	08 95       	ret

0000015e <H_Servo_init>:
 *  Author: husse
 */ 
#include "Servo.h"

void H_Servo_init(void){
	M_Timer_2_init(PWM);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 3a 03 	call	0x674	; 0x674 <M_Timer_2_init>
	M_Timer_2_start(prescaler);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 43 03 	call	0x686	; 0x686 <M_Timer_2_start>
 16a:	08 95       	ret

0000016c <H_Servo_angle>:
}

void H_Servo_angle(u8 angle){
	M_Timer_2_PWM(((angle*31)/90)+62);	
 16c:	2f e1       	ldi	r18, 0x1F	; 31
 16e:	82 9f       	mul	r24, r18
 170:	c0 01       	movw	r24, r0
 172:	11 24       	eor	r1, r1
 174:	6a e5       	ldi	r22, 0x5A	; 90
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	0e 94 49 03 	call	0x692	; 0x692 <__divmodhi4>
 17c:	8e e3       	ldi	r24, 0x3E	; 62
 17e:	86 0f       	add	r24, r22
 180:	0e 94 47 03 	call	0x68e	; 0x68e <M_Timer_2_PWM>
 184:	08 95       	ret

00000186 <H_ultrasonic_init>:
 *  Author: husse
 */ 

#include "ultrasonic.h"

void H_ultrasonic_init(ultrasonic_object UTS){
 186:	96 2f       	mov	r25, r22
 188:	67 2f       	mov	r22, r23
	M_DIO_set_pin_direction(UTS.port,UTS.triger,output);
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	78 2f       	mov	r23, r24
 18e:	89 2f       	mov	r24, r25
 190:	0e 94 ae 01 	call	0x35c	; 0x35c <M_DIO_set_pin_direction>
	M_Timer_1_input_capture_unit_init();
 194:	0e 94 9a 02 	call	0x534	; 0x534 <M_Timer_1_input_capture_unit_init>
 198:	08 95       	ret

0000019a <H_ultrasonic_measure>:
}

u8 H_ultrasonic_measure(ultrasonic_object UTS){
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	c7 2f       	mov	r28, r23
 1a0:	d8 2f       	mov	r29, r24
	M_DIO_set_pin_value(UTS.triger,UTS.triger,low);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	67 2f       	mov	r22, r23
 1a6:	78 2f       	mov	r23, r24
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	45 e0       	ldi	r20, 0x05	; 5
 1b0:	4a 95       	dec	r20
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <H_ultrasonic_measure+0x16>
 1b4:	00 00       	nop
	_delay_us(2);
	M_DIO_set_pin_value(UTS.triger,UTS.triger,high);
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	6c 2f       	mov	r22, r28
 1ba:	7d 2f       	mov	r23, r29
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
 1c2:	5a e1       	ldi	r21, 0x1A	; 26
 1c4:	5a 95       	dec	r21
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <H_ultrasonic_measure+0x2a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <H_ultrasonic_measure+0x30>
	_delay_us(10);
	M_DIO_set_pin_value(UTS.triger,UTS.triger,low);
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	6c 2f       	mov	r22, r28
 1ce:	7d 2f       	mov	r23, r29
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 25 02 	call	0x44a	; 0x44a <M_DIO_set_pin_value>
	
	return ((M_Timer_1_pulseIn(rinsing_edge)*343*100)/(F_CPU*2));
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 a5 02 	call	0x54a	; 0x54a <M_Timer_1_pulseIn>
 1dc:	2c ef       	ldi	r18, 0xFC	; 252
 1de:	35 e8       	ldi	r19, 0x85	; 133
 1e0:	ac 01       	movw	r20, r24
 1e2:	42 9f       	mul	r20, r18
 1e4:	c0 01       	movw	r24, r0
 1e6:	43 9f       	mul	r20, r19
 1e8:	90 0d       	add	r25, r0
 1ea:	52 9f       	mul	r21, r18
 1ec:	90 0d       	add	r25, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	bc 01       	movw	r22, r24
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	34 e2       	ldi	r19, 0x24	; 36
 1fa:	44 ef       	ldi	r20, 0xF4	; 244
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__udivmodsi4>
 202:	82 2f       	mov	r24, r18
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <car_farward>:
	H_DC_motor_forward(DC_motor_left);
}	

void car_backward(void){
	H_DC_motor_backward(DC_motor_right);
	H_DC_motor_backward(DC_motor_left);
 20a:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <DC_motor_right>
 20e:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <DC_motor_right+0x1>
 212:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <DC_motor_right+0x2>
 216:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <DC_motor_right+0x3>
 21a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DC_motor_right+0x4>
 21e:	0e 94 49 00 	call	0x92	; 0x92 <H_DC_motor_forward>
 222:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 226:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 22a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 22e:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 232:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 236:	0e 94 49 00 	call	0x92	; 0x92 <H_DC_motor_forward>
 23a:	08 95       	ret

0000023c <car_right>:
}

void car_right(void){
	H_DC_motor_backward(DC_motor_right);
 23c:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <DC_motor_right>
 240:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <DC_motor_right+0x1>
 244:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <DC_motor_right+0x2>
 248:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <DC_motor_right+0x3>
 24c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DC_motor_right+0x4>
 250:	0e 94 6b 00 	call	0xd6	; 0xd6 <H_DC_motor_backward>
	H_DC_motor_forward(DC_motor_left);
 254:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 258:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 25c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 260:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 264:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 268:	0e 94 49 00 	call	0x92	; 0x92 <H_DC_motor_forward>
 26c:	08 95       	ret

0000026e <car_left>:
}

void car_left(void){
	H_DC_motor_forward(DC_motor_right);
 26e:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <DC_motor_right>
 272:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <DC_motor_right+0x1>
 276:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <DC_motor_right+0x2>
 27a:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <DC_motor_right+0x3>
 27e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DC_motor_right+0x4>
 282:	0e 94 49 00 	call	0x92	; 0x92 <H_DC_motor_forward>
	H_DC_motor_backward(DC_motor_left);
 286:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 28a:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 28e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 292:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 296:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 29a:	0e 94 6b 00 	call	0xd6	; 0xd6 <H_DC_motor_backward>
 29e:	08 95       	ret

000002a0 <car_stop>:
}
	
void car_stop(void){
	H_DC_motor_stop(DC_motor_right);
 2a0:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <DC_motor_right>
 2a4:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <DC_motor_right+0x1>
 2a8:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <DC_motor_right+0x2>
 2ac:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <DC_motor_right+0x3>
 2b0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DC_motor_right+0x4>
 2b4:	0e 94 8d 00 	call	0x11a	; 0x11a <H_DC_motor_stop>
	H_DC_motor_stop(DC_motor_left);
 2b8:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2bc:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2c0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2c4:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 2cc:	0e 94 8d 00 	call	0x11a	; 0x11a <H_DC_motor_stop>
 2d0:	08 95       	ret

000002d2 <main>:
}

int main(void){
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
	ultrasonic_object UTS_1={A,0};
 2dc:	f1 2c       	mov	r15, r1
 2de:	00 e0       	ldi	r16, 0x00	; 0
 2e0:	10 e0       	ldi	r17, 0x00	; 0
	H_Servo_init();
 2e2:	0e 94 af 00 	call	0x15e	; 0x15e <H_Servo_init>
	H_ultrasonic_init(UTS_1);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 c3 00 	call	0x186	; 0x186 <H_ultrasonic_init>
	H_Servo_angle(90);	
 2f0:	8a e5       	ldi	r24, 0x5A	; 90
 2f2:	0e 94 b6 00 	call	0x16c	; 0x16c <H_Servo_angle>
	int angle;
	
	while (1)
	{
		
		if (H_ultrasonic_measure(UTS_1)>5){car_farward();}
 2f6:	6f 2d       	mov	r22, r15
 2f8:	70 2f       	mov	r23, r16
 2fa:	81 2f       	mov	r24, r17
 2fc:	0e 94 cd 00 	call	0x19a	; 0x19a <H_ultrasonic_measure>
 300:	86 30       	cpi	r24, 0x06	; 6
 302:	18 f0       	brcs	.+6      	; 0x30a <main+0x38>
 304:	0e 94 05 01 	call	0x20a	; 0x20a <car_farward>
 308:	f6 cf       	rjmp	.-20     	; 0x2f6 <main+0x24>
		else{
			car_stop();
 30a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <car_stop>
			H_Servo_angle(0);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 b6 00 	call	0x16c	; 0x16c <H_Servo_angle>
			for (angle=0;angle<180;angle++){
 314:	c0 e0       	ldi	r28, 0x00	; 0
 316:	d0 e0       	ldi	r29, 0x00	; 0
 318:	0b c0       	rjmp	.+22     	; 0x330 <main+0x5e>
				H_Servo_angle(angle);
 31a:	8c 2f       	mov	r24, r28
 31c:	0e 94 b6 00 	call	0x16c	; 0x16c <H_Servo_angle>
				if (H_ultrasonic_measure(UTS_1)>5){
 320:	6f 2d       	mov	r22, r15
 322:	70 2f       	mov	r23, r16
 324:	81 2f       	mov	r24, r17
 326:	0e 94 cd 00 	call	0x19a	; 0x19a <H_ultrasonic_measure>
 32a:	86 30       	cpi	r24, 0x06	; 6
 32c:	68 f4       	brcc	.+26     	; 0x348 <main+0x76>
		
		if (H_ultrasonic_measure(UTS_1)>5){car_farward();}
		else{
			car_stop();
			H_Servo_angle(0);
			for (angle=0;angle<180;angle++){
 32e:	21 96       	adiw	r28, 0x01	; 1
 330:	c4 3b       	cpi	r28, 0xB4	; 180
 332:	d1 05       	cpc	r29, r1
 334:	94 f3       	brlt	.-28     	; 0x31a <main+0x48>
				if (H_ultrasonic_measure(UTS_1)>5){
					H_Servo_angle(90);
					return angle;
				}
			}
			if (angle>=0 && angle<=90){car_right();}
 336:	cb 35       	cpi	r28, 0x5B	; 91
 338:	d1 05       	cpc	r29, r1
 33a:	18 f4       	brcc	.+6      	; 0x342 <main+0x70>
 33c:	0e 94 1e 01 	call	0x23c	; 0x23c <car_right>
 340:	da cf       	rjmp	.-76     	; 0x2f6 <main+0x24>
			else{car_left();}
 342:	0e 94 37 01 	call	0x26e	; 0x26e <car_left>
 346:	d7 cf       	rjmp	.-82     	; 0x2f6 <main+0x24>
			car_stop();
			H_Servo_angle(0);
			for (angle=0;angle<180;angle++){
				H_Servo_angle(angle);
				if (H_ultrasonic_measure(UTS_1)>5){
					H_Servo_angle(90);
 348:	8a e5       	ldi	r24, 0x5A	; 90
 34a:	0e 94 b6 00 	call	0x16c	; 0x16c <H_Servo_angle>
			if (angle>=0 && angle<=90){car_right();}
			else{car_left();}
		}
		
	}
}
 34e:	ce 01       	movw	r24, r28
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	08 95       	ret

0000035c <M_DIO_set_pin_direction>:
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	19 f1       	breq	.+70     	; 0x3a6 <M_DIO_set_pin_direction+0x4a>
 360:	30 f0       	brcs	.+12     	; 0x36e <M_DIO_set_pin_direction+0x12>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	e1 f1       	breq	.+120    	; 0x3de <M_DIO_set_pin_direction+0x82>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	09 f4       	brne	.+2      	; 0x36c <M_DIO_set_pin_direction+0x10>
 36a:	54 c0       	rjmp	.+168    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 36c:	08 95       	ret
 36e:	41 11       	cpse	r20, r1
 370:	0c c0       	rjmp	.+24     	; 0x38a <M_DIO_set_pin_direction+0x2e>
 372:	2a b3       	in	r18, 0x1a	; 26
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <M_DIO_set_pin_direction+0x22>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <M_DIO_set_pin_direction+0x1e>
 382:	80 95       	com	r24
 384:	82 23       	and	r24, r18
 386:	8a bb       	out	0x1a, r24	; 26
 388:	08 95       	ret
 38a:	41 30       	cpi	r20, 0x01	; 1
 38c:	09 f0       	breq	.+2      	; 0x390 <M_DIO_set_pin_direction+0x34>
 38e:	5c c0       	rjmp	.+184    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 390:	2a b3       	in	r18, 0x1a	; 26
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <M_DIO_set_pin_direction+0x40>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <M_DIO_set_pin_direction+0x3c>
 3a0:	82 2b       	or	r24, r18
 3a2:	8a bb       	out	0x1a, r24	; 26
 3a4:	08 95       	ret
 3a6:	41 11       	cpse	r20, r1
 3a8:	0c c0       	rjmp	.+24     	; 0x3c2 <M_DIO_set_pin_direction+0x66>
 3aa:	27 b3       	in	r18, 0x17	; 23
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <M_DIO_set_pin_direction+0x5a>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <M_DIO_set_pin_direction+0x56>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	08 95       	ret
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <M_DIO_set_pin_direction+0x6c>
 3c6:	40 c0       	rjmp	.+128    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3c8:	27 b3       	in	r18, 0x17	; 23
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <M_DIO_set_pin_direction+0x78>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <M_DIO_set_pin_direction+0x74>
 3d8:	82 2b       	or	r24, r18
 3da:	87 bb       	out	0x17, r24	; 23
 3dc:	08 95       	ret
 3de:	41 11       	cpse	r20, r1
 3e0:	0c c0       	rjmp	.+24     	; 0x3fa <M_DIO_set_pin_direction+0x9e>
 3e2:	24 b3       	in	r18, 0x14	; 20
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <M_DIO_set_pin_direction+0x92>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <M_DIO_set_pin_direction+0x8e>
 3f2:	80 95       	com	r24
 3f4:	82 23       	and	r24, r18
 3f6:	84 bb       	out	0x14, r24	; 20
 3f8:	08 95       	ret
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	29 f5       	brne	.+74     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3fe:	24 b3       	in	r18, 0x14	; 20
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	84 bb       	out	0x14, r24	; 20
 412:	08 95       	ret
 414:	41 11       	cpse	r20, r1
 416:	0c c0       	rjmp	.+24     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 418:	21 b3       	in	r18, 0x11	; 17
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	80 95       	com	r24
 42a:	82 23       	and	r24, r18
 42c:	81 bb       	out	0x11, r24	; 17
 42e:	08 95       	ret
 430:	41 30       	cpi	r20, 0x01	; 1
 432:	51 f4       	brne	.+20     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 434:	21 b3       	in	r18, 0x11	; 17
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	82 2b       	or	r24, r18
 446:	81 bb       	out	0x11, r24	; 17
 448:	08 95       	ret

0000044a <M_DIO_set_pin_value>:
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	11 f1       	breq	.+68     	; 0x492 <M_DIO_set_pin_value+0x48>
 44e:	30 f0       	brcs	.+12     	; 0x45c <M_DIO_set_pin_value+0x12>
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	d1 f1       	breq	.+116    	; 0x4c8 <M_DIO_set_pin_value+0x7e>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	09 f4       	brne	.+2      	; 0x45a <M_DIO_set_pin_value+0x10>
 458:	52 c0       	rjmp	.+164    	; 0x4fe <M_DIO_set_pin_value+0xb4>
 45a:	08 95       	ret
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	59 f4       	brne	.+22     	; 0x476 <M_DIO_set_pin_value+0x2c>
 460:	2b b3       	in	r18, 0x1b	; 27
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <M_DIO_set_pin_value+0x22>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <M_DIO_set_pin_value+0x1e>
 470:	82 2b       	or	r24, r18
 472:	8b bb       	out	0x1b, r24	; 27
 474:	08 95       	ret
 476:	41 11       	cpse	r20, r1
 478:	5c c0       	rjmp	.+184    	; 0x532 <M_DIO_set_pin_value+0xe8>
 47a:	2b b3       	in	r18, 0x1b	; 27
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <M_DIO_set_pin_value+0x3c>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <M_DIO_set_pin_value+0x38>
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	8b bb       	out	0x1b, r24	; 27
 490:	08 95       	ret
 492:	41 30       	cpi	r20, 0x01	; 1
 494:	59 f4       	brne	.+22     	; 0x4ac <M_DIO_set_pin_value+0x62>
 496:	28 b3       	in	r18, 0x18	; 24
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <M_DIO_set_pin_value+0x58>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <M_DIO_set_pin_value+0x54>
 4a6:	82 2b       	or	r24, r18
 4a8:	88 bb       	out	0x18, r24	; 24
 4aa:	08 95       	ret
 4ac:	41 11       	cpse	r20, r1
 4ae:	41 c0       	rjmp	.+130    	; 0x532 <M_DIO_set_pin_value+0xe8>
 4b0:	28 b3       	in	r18, 0x18	; 24
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <M_DIO_set_pin_value+0x72>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <M_DIO_set_pin_value+0x6e>
 4c0:	80 95       	com	r24
 4c2:	82 23       	and	r24, r18
 4c4:	88 bb       	out	0x18, r24	; 24
 4c6:	08 95       	ret
 4c8:	41 30       	cpi	r20, 0x01	; 1
 4ca:	59 f4       	brne	.+22     	; 0x4e2 <M_DIO_set_pin_value+0x98>
 4cc:	25 b3       	in	r18, 0x15	; 21
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <M_DIO_set_pin_value+0x8e>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <M_DIO_set_pin_value+0x8a>
 4dc:	82 2b       	or	r24, r18
 4de:	85 bb       	out	0x15, r24	; 21
 4e0:	08 95       	ret
 4e2:	41 11       	cpse	r20, r1
 4e4:	26 c0       	rjmp	.+76     	; 0x532 <M_DIO_set_pin_value+0xe8>
 4e6:	25 b3       	in	r18, 0x15	; 21
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <M_DIO_set_pin_value+0xa8>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <M_DIO_set_pin_value+0xa4>
 4f6:	80 95       	com	r24
 4f8:	82 23       	and	r24, r18
 4fa:	85 bb       	out	0x15, r24	; 21
 4fc:	08 95       	ret
 4fe:	41 30       	cpi	r20, 0x01	; 1
 500:	59 f4       	brne	.+22     	; 0x518 <M_DIO_set_pin_value+0xce>
 502:	22 b3       	in	r18, 0x12	; 18
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <M_DIO_set_pin_value+0xc4>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <M_DIO_set_pin_value+0xc0>
 512:	82 2b       	or	r24, r18
 514:	82 bb       	out	0x12, r24	; 18
 516:	08 95       	ret
 518:	41 11       	cpse	r20, r1
 51a:	0b c0       	rjmp	.+22     	; 0x532 <M_DIO_set_pin_value+0xe8>
 51c:	22 b3       	in	r18, 0x12	; 18
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <M_DIO_set_pin_value+0xde>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <M_DIO_set_pin_value+0xda>
 52c:	80 95       	com	r24
 52e:	82 23       	and	r24, r18
 530:	82 bb       	out	0x12, r24	; 18
 532:	08 95       	ret

00000534 <M_Timer_1_input_capture_unit_init>:

u16 array[2];
static volatile int x=0;

void M_Timer_1_input_capture_unit_init(void){
	clear_bit(DDRD,6);
 534:	81 b3       	in	r24, 0x11	; 17
 536:	8f 7b       	andi	r24, 0xBF	; 191
 538:	81 bb       	out	0x11, r24	; 17
	set_reg_mask(TCCR1B,1);
 53a:	8e b5       	in	r24, 0x2e	; 46
 53c:	81 60       	ori	r24, 0x01	; 1
 53e:	8e bd       	out	0x2e, r24	; 46
	set_bit(TIMSK,5);
 540:	89 b7       	in	r24, 0x39	; 57
 542:	80 62       	ori	r24, 0x20	; 32
 544:	89 bf       	out	0x39, r24	; 57
	sei();
 546:	78 94       	sei
 548:	08 95       	ret

0000054a <M_Timer_1_pulseIn>:
}

u16 M_Timer_1_pulseIn(interruption_edge edge){
		
	if (edge==rinsing_edge)
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	21 f4       	brne	.+8      	; 0x556 <M_Timer_1_pulseIn+0xc>
	{
		set_bit(TCCR1B,6);
 54e:	8e b5       	in	r24, 0x2e	; 46
 550:	80 64       	ori	r24, 0x40	; 64
 552:	8e bd       	out	0x2e, r24	; 46
 554:	05 c0       	rjmp	.+10     	; 0x560 <M_Timer_1_pulseIn+0x16>
	}
	else if (edge==falling_edge)
 556:	81 11       	cpse	r24, r1
 558:	03 c0       	rjmp	.+6      	; 0x560 <M_Timer_1_pulseIn+0x16>
	{
		clear_bit(TCCR1B,6);
 55a:	8e b5       	in	r24, 0x2e	; 46
 55c:	8f 7b       	andi	r24, 0xBF	; 191
 55e:	8e bd       	out	0x2e, r24	; 46
	}
	return (array[1]-array[0]);
 560:	ed e6       	ldi	r30, 0x6D	; 109
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	82 81       	ldd	r24, Z+2	; 0x02
 566:	93 81       	ldd	r25, Z+3	; 0x03
 568:	20 81       	ld	r18, Z
 56a:	31 81       	ldd	r19, Z+1	; 0x01
	
}
 56c:	82 1b       	sub	r24, r18
 56e:	93 0b       	sbc	r25, r19
 570:	08 95       	ret

00000572 <__vector_6>:

ISR(TIMER1_CAPT_vect){
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25

	x++;
 580:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 584:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 58e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	if (read_bit(TCCR1B,6)==1)
 592:	0e b4       	in	r0, 0x2e	; 46
 594:	06 fe       	sbrs	r0, 6
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <__vector_6+0x34>
	{
		array[0]=ICR1L;
 598:	86 b5       	in	r24, 0x26	; 38
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <array+0x1>
 5a0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <array>
 5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <__vector_6+0x46>
	}
	else if (read_bit(TCCR1B,6)==0)
 5a6:	0e b4       	in	r0, 0x2e	; 46
 5a8:	06 fc       	sbrc	r0, 6
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <__vector_6+0x46>
	{
		array[1]=ICR1;
 5ac:	86 b5       	in	r24, 0x26	; 38
 5ae:	97 b5       	in	r25, 0x27	; 39
 5b0:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <array+0x3>
 5b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <array+0x2>
	}
	toggle_bit(TCCR1B,6);
 5b8:	9e b5       	in	r25, 0x2e	; 46
 5ba:	80 e4       	ldi	r24, 0x40	; 64
 5bc:	89 27       	eor	r24, r25
 5be:	8e bd       	out	0x2e, r24	; 46
	toggle_bit(PORTC,2);
 5c0:	95 b3       	in	r25, 0x15	; 21
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	89 27       	eor	r24, r25
 5c6:	85 bb       	out	0x15, r24	; 21
	
	
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	0f 90       	pop	r0
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	0f 90       	pop	r0
 5d2:	1f 90       	pop	r1
 5d4:	18 95       	reti

000005d6 <M_Timer_0_Task_scedular>:
void M_Timer_0_Task_start(void){
	M_Timer_0_init(normal);
	M_Timer_0_start(1);
}

void M_Timer_0_Task_scedular(void){
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
	static volatile u8 Task_clock_counter=0;
	for (int i=0;i<max_Tasks;i++)
 5da:	c0 e0       	ldi	r28, 0x00	; 0
 5dc:	d0 e0       	ldi	r29, 0x00	; 0
 5de:	1b c0       	rjmp	.+54     	; 0x616 <M_Timer_0_Task_scedular+0x40>
	{
		if (Task_array[i].period==Task_clock_counter)
 5e0:	fe 01       	movw	r30, r28
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	ef 58       	subi	r30, 0x8F	; 143
 5ec:	ff 4f       	sbci	r31, 0xFF	; 255
 5ee:	20 81       	ld	r18, Z
 5f0:	31 81       	ldd	r19, Z+1	; 0x01
 5f2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Task_clock_counter.1660>
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	28 17       	cp	r18, r24
 5fa:	39 07       	cpc	r19, r25
 5fc:	59 f4       	brne	.+22     	; 0x614 <M_Timer_0_Task_scedular+0x3e>
		{
			Task_array[i].task();	
 5fe:	fe 01       	movw	r30, r28
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	ef 58       	subi	r30, 0x8F	; 143
 60a:	ff 4f       	sbci	r31, 0xFF	; 255
 60c:	02 80       	ldd	r0, Z+2	; 0x02
 60e:	f3 81       	ldd	r31, Z+3	; 0x03
 610:	e0 2d       	mov	r30, r0
 612:	09 95       	icall
	M_Timer_0_start(1);
}

void M_Timer_0_Task_scedular(void){
	static volatile u8 Task_clock_counter=0;
	for (int i=0;i<max_Tasks;i++)
 614:	21 96       	adiw	r28, 0x01	; 1
 616:	c3 30       	cpi	r28, 0x03	; 3
 618:	d1 05       	cpc	r29, r1
 61a:	14 f3       	brlt	.-60     	; 0x5e0 <M_Timer_0_Task_scedular+0xa>
		if (Task_array[i].period==Task_clock_counter)
		{
			Task_array[i].task();	
		}
	}
	Task_clock_counter++;
 61c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Task_clock_counter.1660>
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Task_clock_counter.1660>
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <__vector_11>:

ISR(TIMER0_OVF_vect){
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	2f 93       	push	r18
 638:	3f 93       	push	r19
 63a:	4f 93       	push	r20
 63c:	5f 93       	push	r21
 63e:	6f 93       	push	r22
 640:	7f 93       	push	r23
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	af 93       	push	r26
 648:	bf 93       	push	r27
 64a:	ef 93       	push	r30
 64c:	ff 93       	push	r31
	M_Timer_0_Task_scedular();
 64e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <M_Timer_0_Task_scedular>
}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <M_Timer_2_init>:
 */ 

#include "Timer_0.h"

void M_Timer_2_init(wave_form_generator_mode mode){
	if (mode==PWM)
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	31 f4       	brne	.+12     	; 0x684 <M_Timer_2_init+0x10>
	{
		set_reg_mask(TCCR2,0b01101000);
 678:	85 b5       	in	r24, 0x25	; 37
 67a:	88 66       	ori	r24, 0x68	; 104
 67c:	85 bd       	out	0x25, r24	; 37
		set_bit(DDRD,7);
 67e:	81 b3       	in	r24, 0x11	; 17
 680:	80 68       	ori	r24, 0x80	; 128
 682:	81 bb       	out	0x11, r24	; 17
 684:	08 95       	ret

00000686 <M_Timer_2_start>:
	}
}

void M_Timer_2_start(u8 prescaler){
	set_reg_mask(TCCR2,prescaler);
 686:	95 b5       	in	r25, 0x25	; 37
 688:	89 2b       	or	r24, r25
 68a:	85 bd       	out	0x25, r24	; 37
 68c:	08 95       	ret

0000068e <M_Timer_2_PWM>:
}

void M_Timer_2_PWM(u8 PWM_value){
	set_reg_value(OCR2,PWM_value);	
 68e:	83 bd       	out	0x23, r24	; 35
 690:	08 95       	ret

00000692 <__divmodhi4>:
 692:	97 fb       	bst	r25, 7
 694:	07 2e       	mov	r0, r23
 696:	16 f4       	brtc	.+4      	; 0x69c <__divmodhi4+0xa>
 698:	00 94       	com	r0
 69a:	07 d0       	rcall	.+14     	; 0x6aa <__divmodhi4_neg1>
 69c:	77 fd       	sbrc	r23, 7
 69e:	09 d0       	rcall	.+18     	; 0x6b2 <__divmodhi4_neg2>
 6a0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__udivmodhi4>
 6a4:	07 fc       	sbrc	r0, 7
 6a6:	05 d0       	rcall	.+10     	; 0x6b2 <__divmodhi4_neg2>
 6a8:	3e f4       	brtc	.+14     	; 0x6b8 <__divmodhi4_exit>

000006aa <__divmodhi4_neg1>:
 6aa:	90 95       	com	r25
 6ac:	81 95       	neg	r24
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	08 95       	ret

000006b2 <__divmodhi4_neg2>:
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255

000006b8 <__divmodhi4_exit>:
 6b8:	08 95       	ret

000006ba <__udivmodsi4>:
 6ba:	a1 e2       	ldi	r26, 0x21	; 33
 6bc:	1a 2e       	mov	r1, r26
 6be:	aa 1b       	sub	r26, r26
 6c0:	bb 1b       	sub	r27, r27
 6c2:	fd 01       	movw	r30, r26
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <__udivmodsi4_ep>

000006c6 <__udivmodsi4_loop>:
 6c6:	aa 1f       	adc	r26, r26
 6c8:	bb 1f       	adc	r27, r27
 6ca:	ee 1f       	adc	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	a2 17       	cp	r26, r18
 6d0:	b3 07       	cpc	r27, r19
 6d2:	e4 07       	cpc	r30, r20
 6d4:	f5 07       	cpc	r31, r21
 6d6:	20 f0       	brcs	.+8      	; 0x6e0 <__udivmodsi4_ep>
 6d8:	a2 1b       	sub	r26, r18
 6da:	b3 0b       	sbc	r27, r19
 6dc:	e4 0b       	sbc	r30, r20
 6de:	f5 0b       	sbc	r31, r21

000006e0 <__udivmodsi4_ep>:
 6e0:	66 1f       	adc	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	1a 94       	dec	r1
 6ea:	69 f7       	brne	.-38     	; 0x6c6 <__udivmodsi4_loop>
 6ec:	60 95       	com	r22
 6ee:	70 95       	com	r23
 6f0:	80 95       	com	r24
 6f2:	90 95       	com	r25
 6f4:	9b 01       	movw	r18, r22
 6f6:	ac 01       	movw	r20, r24
 6f8:	bd 01       	movw	r22, r26
 6fa:	cf 01       	movw	r24, r30
 6fc:	08 95       	ret

000006fe <__udivmodhi4>:
 6fe:	aa 1b       	sub	r26, r26
 700:	bb 1b       	sub	r27, r27
 702:	51 e1       	ldi	r21, 0x11	; 17
 704:	07 c0       	rjmp	.+14     	; 0x714 <__udivmodhi4_ep>

00000706 <__udivmodhi4_loop>:
 706:	aa 1f       	adc	r26, r26
 708:	bb 1f       	adc	r27, r27
 70a:	a6 17       	cp	r26, r22
 70c:	b7 07       	cpc	r27, r23
 70e:	10 f0       	brcs	.+4      	; 0x714 <__udivmodhi4_ep>
 710:	a6 1b       	sub	r26, r22
 712:	b7 0b       	sbc	r27, r23

00000714 <__udivmodhi4_ep>:
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	5a 95       	dec	r21
 71a:	a9 f7       	brne	.-22     	; 0x706 <__udivmodhi4_loop>
 71c:	80 95       	com	r24
 71e:	90 95       	com	r25
 720:	bc 01       	movw	r22, r24
 722:	cd 01       	movw	r24, r26
 724:	08 95       	ret

00000726 <_exit>:
 726:	f8 94       	cli

00000728 <__stop_program>:
 728:	ff cf       	rjmp	.-2      	; 0x728 <__stop_program>
